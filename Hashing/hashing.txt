Here is the given array
┌───┬───┬───┬───┬───┐
│ 1 │ 2 │ 1 │ 3 │ 2 │
└───┴───┴───┴───┴───┘
Hashing: It stores the element of the array with their frequencies in easy manner.
Now I want to know that how much time these element appears in the given array

** The psuedo code for brute force can be: **

int num, arr[]
count = 0

for(i=0, i<len(arr), i++):
    if(arr[i] == num):
        count += 1

return count

Time Complexity: How many times an element appears is O(N),
                    1 -> 2
                    2 -> 2
                    3 -> 1
                    4 -> 0
                    |
                    |
                    |
                    100
                    |
                    Q

It can go till 100 or let's assume it queries or Q
If the queries would have been 5
the time Complexity will be O(5 * N)
in that way for queries Q it will be
O(Q * N)

Now, if suppose Q = 10^10, so the time Complexity will be O(10^10 * N)
and it is known that if input is 10^8 it takes 1 second to run the program,
but since the program is taking input as 10^10 then,
1 operation = 1/10^8
10^10 = 1/10^8 * 10^10
so it will be 100 seconds, which will take long time to run the program

To neglect this problem we use Hashing method which will take less time to run the program